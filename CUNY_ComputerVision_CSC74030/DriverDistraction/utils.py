import cv2
import dlib
import numpy as np
import math

def shape_to_np(shape, dtype="int"):
    # initialize
    coords = np.zeros((68, 2), dtype=dtype)
    # landmark to numpy
    for i in range(0, 68):
        coords[i] = (shape.part(i).x, shape.part(i).y)
    return coords

def distance(p1, p2):
    d = np.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)
    return d

def getBoxCoord(box):
    # self.face = ((face.left(), face.top()),(face.right(), face.bottom()))
    left_top = box[0]
    right_bottom = box[1]

    right_top = (right_bottom[0],left_top[1])
    left_bottom = (left_top[0],right_bottom[1])

    return left_top,right_top, left_bottom, right_bottom

def get_all_68_pts(detection):
    model_points = np.array([[-73.393524, -29.801432, -47.667534],
                                    [-72.77502 , -10.949766, -45.909405],
                                    [-70.53364 ,   7.929818, -44.84258 ],
                                    [-66.85006 ,  26.07428 , -43.141113],
                                    [-59.790188,  42.56439 , -38.6353  ],
                                    [-48.368973,  56.48108 , -30.750622],
                                    [-34.1211  ,  67.246994, -18.456453],
                                    [-17.87541 ,  75.05689 ,  -3.609035],
                                    [  0.098749,  77.06129 ,   0.881698],
                                    [ 17.477032,  74.758446,  -5.181201],
                                    [ 32.648968,  66.92902 , -19.176563],
                                    [ 46.372356,  56.31139 , -30.77057 ],
                                    [ 57.34348 ,  42.419125, -37.628628],
                                    [ 64.38848 ,  25.45588 , -40.88631 ],
                                    [ 68.212036,   6.990805, -42.28145 ],
                                    [ 70.486404, -11.666193, -44.142567],
                                    [ 71.375824, -30.36519 , -47.140427],
                                    [-61.119408, -49.361603, -14.254422],
                                    [-51.287586, -58.769794,  -7.268147],
                                    [-37.8048  , -61.996155,  -0.442051],
                                    [-24.022755, -61.033398,   6.606501],
                                    [-11.635713, -56.68676 ,  11.967398],
                                    [ 12.056636, -57.391033,  12.051204],
                                    [ 25.106256, -61.902187,   7.315098],
                                    [ 38.33859 , -62.777714,   1.022953],
                                    [ 51.191006, -59.302345,  -5.349435],
                                    [ 60.053852, -50.190254, -11.615746],
                                    [  0.65394 , -42.19379 ,  13.380835],
                                    [  0.804809, -30.993721,  21.150852],
                                    [  0.992204, -19.944595,  29.284037],
                                    [  1.226783,  -8.414541,  36.94806 ],
                                    [-14.772472,   2.598255,  20.132004],
                                    [ -7.180239,   4.751589,  23.536684],
                                    [  0.55592 ,   6.5629  ,  25.944448],
                                    [  8.272499,   4.661005,  23.695742],
                                    [ 15.214351,   2.643046,  20.858156],
                                    [-46.04729 , -37.471413,  -7.037989],
                                    [-37.674686, -42.73051 ,  -3.021217],
                                    [-27.883856, -42.711517,  -1.353629],
                                    [-19.648268, -36.75474 ,   0.111088],
                                    [-28.272964, -35.134495,   0.147273],
                                    [-38.082417, -34.919044,  -1.476612],
                                    [ 19.265867, -37.032307,   0.665746],
                                    [ 27.894192, -43.342445,  -0.24766 ],
                                    [ 37.43753 , -43.11082 ,  -1.696435],
                                    [ 45.170807, -38.086514,  -4.894163],
                                    [ 38.196453, -35.532024,  -0.282961],
                                    [ 28.76499 , -35.484287,   1.172675],
                                    [-28.916267,  28.612717,   2.24031 ],
                                    [-17.533194,  22.172188,  15.934335],
                                    [ -6.68459 ,  19.02905 ,  22.611355],
                                    [  0.381001,  20.721119,  23.748438],
                                    [  8.375443,  19.03546 ,  22.721994],
                                    [ 18.876617,  22.39411 ,  15.610679],
                                    [ 28.794413,  28.079924,   3.217393],
                                    [ 19.057573,  36.29825 ,  14.987997],
                                    [  8.956375,  39.634575,  22.554245],
                                    [  0.381549,  40.395645,  23.591625],
                                    [ -7.428895,  39.836407,  22.406107],
                                    [-18.160633,  36.6779  ,  15.121907],
                                    [-24.37749 ,  28.67777 ,   4.785684],
                                    [ -6.897633,  25.475977,  20.893742],
                                    [  0.340663,  26.014269,  22.220478],
                                    [  8.444722,  25.326199,  21.02552 ],
                                    [ 24.474474,  28.323008,   5.712776],
                                    [  8.449166,  30.596216,  20.67149 ],
                                    [  0.205322,  31.408737,  21.90367 ],
                                    [ -7.198266,  30.844875,  20.328022]],dtype='double')

    x1,y1,x2,y2 = detection.face[0][0],detection.face[0][1],detection.face[1][0],detection.face[1][1]
    image_points = detection.shape*(x2-x1)
    image_points[:,0] += x1
    image_points[:,1] += y1
    image_points = np.asarray(image_points,dtype='double')


    return model_points, image_points